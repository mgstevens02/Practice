# -*- coding: utf-8 -*-
"""Compulsory Education IV Replication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-G-qiAaJQEkk2DXXVH1nr3GsIpduhUa5

## **[DOES COMPULSORY SCHOOL ATTENDANCE AFFECT SCHOOLING AND EARNINGS?](https://www.jstor.org/stable/2937954)**

JOSHUA D. ANGRIST AND ALAN B. KRUEGER
QUARTERLY JOURNAL OF ECONOMICS VOL. CVI ISSUE 4 NOVEMBER 1991

FOR ACCESSING DATA CLICK [HERE](https://drive.google.com/drive/folders/1bO_FQJM7zllOib27ctYlLdtyfVATqITf?usp=sharing). DUE TO GITHUB FILE SIZE RESTRICTIONS DATA IS SEPARATED BY THE THREE COHORTS: 1930-1939, 1940-1949, AND 1950-1959. 1940-1949 DATA IS SPLIT INTO "BASE" AND "EXTRA" DATA WITH "EXTRA" DATA CONTAINING ADDITIONAL VARIABLES FOR CERTAIN OLS AND 2SLS MODELS.

**IMPORTING DATA INTO COLAB ENVIRONMENT**
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')

!git clone https://github.com/mgstevens02/Compulsory-Education-IV-Replication.git

# Change directory to the cloned repository
# %cd Compulsory-Education-IV-Replication

import pandas as pd

from google.colab import files

!wget https://github.com/mgstevens02/Compulsory-Education-IV-Replication/blob/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_30_39_all_data.csv
!wget https://github.com/mgstevens02/Compulsory-Education-IV-Replication/blob/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_40_49_base_data.csv
!wget https://github.com/mgstevens02/Compulsory-Education-IV-Replication/blob/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_40_49_extra_data.csv
!wget https://github.com/mgstevens02/Compulsory-Education-IV-Replication/blob/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_50_59_base_data.csv


# Display the first 5 rows of the dataframe
print(data.head())

"""## **SECTION I: SEASON OF BIRTH, COMPULSORY SCHOOLING, AND YEARS OF EDUCATION**

Addressing the question of how much schooling affects earnings by leveraging the natural experiment of compulsory schooling laws.

**REPLICATING FIGURE I: YEARS OF EDUCATION AND SEASON OF BIRTH 1980 CENSUS YEARS 1930-1939**
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
url = 'https://raw.githubusercontent.com/mgstevens02/Compulsory-Education-IV-Replication/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_30_39_all_data.csv'
df = pd.read_csv(url)

# Calculate the average years of education for each birth quarter of each year
grouped = df.groupby(['BIRTHYR', 'BIRTHQTR'])['YRSED'].mean().reset_index()

# Creating a continuous index to represent each unique (year, quarter) combination
grouped['YearQuarterIndex'] = grouped['BIRTHYR'] + (grouped['BIRTHQTR'] - 1) / 4

# Plotting
plt.figure(figsize=(12, 8))
plt.plot(grouped['YearQuarterIndex'], grouped['YRSED'], '-o', label='Average Years of Education')

# Annotating each point with the quarter of birth, ensuring no decimals are included
for idx, row in grouped.iterrows():
    quarter_annotation = f'Q{int(row["BIRTHQTR"])}'  # Convert to integer to remove decimal
    plt.annotate(quarter_annotation, (row['YearQuarterIndex'], row['YRSED']), textcoords="offset points", xytext=(0,5), ha='center')

plt.xlabel('Year and Quarter')
plt.ylabel('Average Years of Education')
plt.title('Average Years of Education by Birth Quarter and Year')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.tight_layout()  # Adjust layout to make room for the rotated x-axis labels
plt.show()

"""**REPLICATING FIGURE II: YEARS OF EDUCATION AND SEASON OF BIRTH 1980 CENSUS YEARS 1940-1949**"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
url = 'https://raw.githubusercontent.com/mgstevens02/Compulsory-Education-IV-Replication/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_40_49_base_data.csv'
df = pd.read_csv(url)

# Calculate the average years of education for each birth quarter of each year
grouped = df.groupby(['BIRTHYR', 'BIRTHQTR'])['YRSED'].mean().reset_index()

# Creating a continuous index to represent each unique (year, quarter) combination
grouped['YearQuarterIndex'] = grouped['BIRTHYR'] + (grouped['BIRTHQTR'] - 1) / 4

# Plotting
plt.figure(figsize=(12, 8))
plt.plot(grouped['YearQuarterIndex'], grouped['YRSED'], '-o', label='Average Years of Education')

# Annotating each point with the quarter of birth, ensuring no decimals are included
for idx, row in grouped.iterrows():
    quarter_annotation = f'Q{int(row["BIRTHQTR"])}'  # Convert to integer to remove decimal
    plt.annotate(quarter_annotation, (row['YearQuarterIndex'], row['YRSED']), textcoords="offset points", xytext=(0,5), ha='center')

plt.xlabel('Year and Quarter')
plt.ylabel('Average Years of Education')
plt.title('Average Years of Education by Birth Quarter and Year')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.tight_layout()  # Adjust layout to make room for the rotated x-axis labels
plt.show()

"""**REPLICATING FIGURE III: YEARS OF EDUCATION AND SEASON OF BIRTH 1980 CENSUS YEARS 1950-1959**"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
url = 'https://raw.githubusercontent.com/mgstevens02/Compulsory-Education-IV-Replication/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_50_59_base_data.csv'
df = pd.read_csv(url)

# Calculate the average years of education for each birth quarter of each year
grouped = df.groupby(['BIRTHYR', 'BIRTHQTR'])['YRSED'].mean().reset_index()

# Creating a continuous index to represent each unique (year, quarter) combination
grouped['YearQuarterIndex'] = grouped['BIRTHYR'] + (grouped['BIRTHQTR'] - 1) / 4

# Plotting
plt.figure(figsize=(12, 8))
plt.plot(grouped['YearQuarterIndex'], grouped['YRSED'], '-o', label='Average Years of Education')

# Annotating each point with the quarter of birth, ensuring no decimals are included
for idx, row in grouped.iterrows():
    quarter_annotation = f'Q{int(row["BIRTHQTR"])}'  # Convert to integer to remove decimal
    plt.annotate(quarter_annotation, (row['YearQuarterIndex'], row['YRSED']), textcoords="offset points", xytext=(0,5), ha='center')

plt.xlabel('Year and Quarter')
plt.ylabel('Average Years of Education')
plt.title('Average Years of Education by Birth Quarter and Year')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.tight_layout()  # Adjust layout to make room for the rotated x-axis labels
plt.show()

"""The reasoning behind creating these figures lies in illustrating the natural experiment conditions created by the variation in school start age due to birthday and compulsory schooling laws. The graphs illustrate a small variation in the years of schooling for those born in different quarters with those born towards the end of the year usually having more education. Figures I and II show a positive trend in education while Figure III shows a negative trend likely because of men dropping out of school due to the Vietnam war. This variation allows the authors to explore the impact of compulsory schooling on educational outcomes and earnings, directly connecting to the research objective of estimating the return to education and examining the effect of compulsory schooling laws on educational attainment and subsequent earnings. These figures visually support the hypothesis that individuals born at different times of the year have different educational trajectories due to the age at which they are legally allowed to leave school, providing empirical evidence for the paper's analysis.

## **SECTION II: ESTIMATING THE RETURN TO EDUCATION**

Do the small differences in education for men born in different months of the year translate into differences in earnings?

**REPLICATING TABLE III PANEL B: WALD ESTIMATES FOR 1980 CENSUS MEN BORN 1930-1939**
"""

import pandas as pd
import numpy as np

url = 'https://raw.githubusercontent.com/mgstevens02/Compulsory-Education-IV-Replication/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_30_39_all_data.csv'

# Load data from the provided URL
df = pd.read_csv(url)

# Drop rows with missing values
df.dropna(subset=['BIRTHQTR', 'WEEKERN', 'YRSED'], inplace=True)

# Calculate means for men born in the first quarter and men born in the last three quarters
first_quarter = df[df['BIRTHQTR'] == 1]
last_three_quarters = df[df['BIRTHQTR'].isin([2, 3, 4])]

# Calculate means
mean_ln_earnings_fq = np.log(first_quarter['WEEKERN']).mean()
mean_ln_earnings_l3q = np.log(last_three_quarters['WEEKERN']).mean()
mean_education_fq = first_quarter['YRSED'].mean()
mean_education_l3q = last_three_quarters['YRSED'].mean()

# Calculate differences
difference_ln_earnings = mean_ln_earnings_fq - mean_ln_earnings_l3q
difference_education = mean_education_fq - mean_education_l3q

# Calculate Wald estimate
wald_estimate = difference_ln_earnings / difference_education

# Calculate bivariate regression of log weekly earnings on years of education
y = np.log(df['WEEKERN'])
X = df['YRSED']
X = sm.add_constant(X)  # Add constant term to the predictor
model = sm.OLS(y, X).fit()
ols_estimate = model.params['YRSED']


# Calculate differences
difference_ln_weekly_wage = mean_ln_weekly_wage_fq - mean_ln_weekly_wage_l3q
difference_YRSED = avg_education_fq - avg_education_l3q


# Create a DataFrame for the results
results = pd.DataFrame({
    'Statistic': ['ln Weekly Wage', 'Education', 'Wald Estimate', 'OLS Estimate'],
    'First Quarter': [mean_ln_weekly_wage_fq, avg_education_fq, '-', '-'],
    'Last Three Quarters': [mean_ln_weekly_wage_l3q, avg_education_l3q, '-', '-'],
    'Difference': [difference_ln_weekly_wage, difference_YRSED, wald_estimate, ols_estimate]
})

# Print or display the results DataFrame
print(results)

"""The Wald Estimate of 0.082765 is greater than the OLS Estimate of 0.069211, though the difference is not statistically significant. However, both of these estimates only consider the effects of education on earnings and do not consider the birth year. Since birth year is not considered, it could be assumed that Wald Estimates for men younger than the ones studied above (who are 40-49) could be biased downwards because they are on the upward sloping portion of the age-earnings profile.

## **SECTION II CONTINUED: TSLS ESTIMATES**

The TSLS (Two-Stage Least Squares) estimation model is designed to address the potential endogeneity of education in wage equations by using instrumental variables (IV). The model estimates the return to education while controlling for age-related trends in earnings and other covariates.

# **REPLICATION OF TABLE V: OLS AND TSLS ESTIMATES OF THE RETURN TO EDUCATION FOR MEN BORN 1930-1939: 1980 CENSUS**

This table includes 4 sets of OLS and TSLS regressions with each set using a different mixture of covariates.

**OLS AND TSLS #1**

Using only independent variables 'Years of Education', 'Year of Birth' dummies, and 'Birth Quarter' dummies. For TSLS, the interaction between the 'Year of Birth' dummies and 'Birth Quarter' dummies is the instrumental variable.

*OLS*
"""

import pandas as pd
import numpy as np
import statsmodels.api as sm

# Load the dataset
url = 'https://raw.githubusercontent.com/mgstevens02/Compulsory-Education-IV-Replication/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_30_39_all_data.csv'
df = pd.read_csv(url)

df.dropna(inplace=True)



# Create birth year dummies
for year in range(1930, 1940):
    df[f'BirthYearDummy_{year}'] = (df['BIRTHYR'] == year).astype(int)

# Define the dependent variable (Y) and the independent variables (X)
Y = np.log(df['WEEKERN'])  # Natural logarithm of WEEKERN
independent_vars = ['YRSED'] + [f'BirthYearDummy_{year}' for year in range(1930, 1940)]
X = df[independent_vars]

# Add constant term to the independent variables
X = sm.add_constant(X)

# Fit OLS regression model
ols_model = sm.OLS(Y, X).fit()

# Extract YRS ED coefficient and standard error
YRSED_coef_ols_1 = round(ols_model.params['YRSED'], 4)
YRSED_std_err_ols_1 = round(ols_model.bse['YRSED'], 4)

"""*TSLS*"""

import pandas as pd
import statsmodels.api as sm

import pandas as pd
import numpy as np
import statsmodels.api as sm

# Load the dataset
url = 'https://raw.githubusercontent.com/mgstevens02/Compulsory-Education-IV-Replication/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_30_39_all_data.csv'
df = pd.read_csv(url)

df.dropna(inplace=True)



# First stage: Regress YRSED on BIRTHQTR and a constant (with instrumental variable)
endog_first_stage = df['YRSED']
exog_first_stage = sm.add_constant(df['BIRTHQTR'])
instrument_first_stage = sm.add_constant(df['BIRTHQTR'])  # Instrumental variable
first_stage_model = sm.OLS(endog_first_stage, exog_first_stage).fit(cov_type='HC0')  # Use robust standard errors

# Predict YRSED using the fitted first-stage model
df['YRSED_predicted'] = first_stage_model.predict()


# Second stage: Regress natural logarithm of WEEKERN on the predicted YRSED from the first stage

# Create birth year dummies
for year in range(1930, 1940):
    df[f'BirthYearDummy_{year}'] = (df['BIRTHYR'] == year).astype(int)

covariate_columns = ['YRSED_predicted'] + [f'BirthYearDummy_{year}' for year in range(1930, 1940)]

# Select the explanatory variables for the second stage
exog_second_stage = sm.add_constant(df[covariate_columns])
endog_second_stage = np.log(df['WEEKERN'])  # Natural logarithm of WEEKERN

second_stage_model = sm.OLS(endog_second_stage, exog_second_stage).fit(cov_type='HC0')  # Use robust standard errors

# Extract YRS ED coefficient and standard error from the second stage

YRSED_coef_second_stage_1 = round(second_stage_model.params['YRSED_predicted'], 4)
YRSED_std_err_second_stage_1 = round(second_stage_model.bse['YRSED_predicted'], 4)

# Create DataFrame
data = {
    'OLS': [YRSED_coef_ols_1, YRSED_std_err_ols_1,"-","-","-","-","-","-","-","-","-","-"],
    'TSLS': [YRSED_coef_second_stage_1, YRSED_std_err_second_stage_1, "-","-","-","-","-","-","-","-","-","-"]
}
index = ['Years of Education', '', 'AGE', '','AGESQR', '', 'Married (1= married)', '', 'Race (1= black)', '', 'Place of Work (1= center city)', '']
df_1_output = pd.DataFrame(data, index=index)

# Display DataFrame
print(df_1_output)

"""**OLS AND TSLS #2**

Adding independent variables 'AGE' and 'AGE SQUARED' to OLS and TSLS.

*OLS*
"""

import pandas as pd
import numpy as np
import statsmodels.api as sm

# Load the dataset
url = 'https://raw.githubusercontent.com/mgstevens02/Compulsory-Education-IV-Replication/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_30_39_all_data.csv'
df = pd.read_csv(url)

df.dropna(inplace=True)


# Create birth year dummies
for year in range(1930, 1940):
    df[f'BirthYearDummy_{year}'] = (df['BIRTHYR'] == year).astype(int)

# Define the dependent variable (Y) and the independent variables (X)
Y = np.log(df['WEEKERN'])  # Natural logarithm of WEEKERN
independent_vars = ['YRSED'] + [f'BirthYearDummy_{year}' for year in range(1930, 1940)]+['AGE']+['AGESQR']
X = df[independent_vars]

# Add constant term to the independent variables
X = sm.add_constant(X)

# Fit OLS regression model
ols_model = sm.OLS(Y, X).fit()

# Extract YRS ED coefficient and standard error
YRSED_coef_ols_2 = round(ols_model.params['YRSED'], 4)
YRSED_std_err_ols_2 = round(ols_model.bse['YRSED'], 4)

# Extract coefficients and standard errors for AGE and AGESQR
age_coef = round(ols_model.params['AGE'], 4)
age_std_err = round(ols_model.bse['AGE'], 4)

agesqr_coef = round(ols_model.params['AGESQR'], 4)
agesqr_std_err = round(ols_model.bse['AGESQR'], 4)

"""*TSLS*"""

import pandas as pd
import numpy as np
import statsmodels.api as sm

# Load the dataset
url = 'https://raw.githubusercontent.com/mgstevens02/Compulsory-Education-IV-Replication/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_30_39_all_data.csv'
df = pd.read_csv(url)

df.dropna(inplace=True)

# First stage: Regress YRSED on BIRTHQTR and a constant (with instrumental variable)
endog_first_stage = df['YRSED']
exog_first_stage = sm.add_constant(df[['BIRTHQTR']])
instrument_first_stage = sm.add_constant(df['BIRTHQTR'])  # Instrumental variable
first_stage_model = sm.OLS(endog_first_stage, exog_first_stage).fit(cov_type='HC0')  # Use robust standard errors

# Predict YRSED using the fitted first-stage model
df['YRSED_predicted'] = first_stage_model.predict()



# Second stage: Regress natural logarithm of WEEKERN on the predicted YRSED from the first stage

# Create birth year dummies
for year in range(1930, 1940):
    df[f'BirthYearDummy_{year}'] = (df['BIRTHYR'] == year).astype(int)

covariate_columns = ['YRSED_predicted', 'AGE', 'AGESQR'] + [f'BirthYearDummy_{year}' for year in range(1930, 1940)]
endog_second_stage = np.log(df['WEEKERN'])  # Natural logarithm of WEEKERN
exog_second_stage = sm.add_constant(df[covariate_columns])
second_stage_model = sm.OLS(endog_second_stage, exog_second_stage).fit(cov_type='HC0')  # Use robust standard errors

# Extract YRS ED coefficient and standard error from the second stage
YRSED_coef_second_stage_2 = round(second_stage_model.params['YRSED_predicted'], 4)
YRSED_std_err_second_stage_2 = round(second_stage_model.bse['YRSED_predicted'], 4)


# Extract coefficients and standard errors for AGE and AGESQR from the second stage model
age_coef_second_stage = round(second_stage_model.params['AGE'], 4)
age_std_err_second_stage = round(second_stage_model.bse['AGE'], 4)

agesqr_coef_second_stage = round(second_stage_model.params['AGESQR'], 4)
agesqr_std_err_second_stage = round(second_stage_model.bse['AGESQR'], 4)

# Create DataFrame
data = {
    'OLS': [YRSED_coef_ols_2, YRSED_std_err_ols_2, age_coef, age_std_err, agesqr_coef, agesqr_std_err, "-","-","-","-","-","-"],
    'TSLS': [YRSED_coef_second_stage_2, (YRSED_std_err_second_stage_2), age_coef_second_stage, (age_std_err_second_stage), agesqr_coef_second_stage, (agesqr_std_err_second_stage),"-","-","-","-","-","-"]
}
index = ['Years of Education', '', 'AGE', '','AGESQR', '', 'Married (1= married)', '', 'Race (1= black)', '', 'Place of Work (1= center city)', '']
df_2_output = pd.DataFrame(data, index=index)

# Display DataFrame
print(df_2_output)

"""**OLS AND TSLS #3**

Adding independent variables 'MARST' and 'PWTYPE' and 'RACE'

*OLS*
"""

import pandas as pd
import numpy as np
import statsmodels.api as sm

# Load the dataset
url = 'https://raw.githubusercontent.com/mgstevens02/Compulsory-Education-IV-Replication/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_30_39_all_data.csv'
df = pd.read_csv(url)

df.dropna(inplace=True)

# Create birth year dummies
for year in range(1930, 1940):
    df[f'BirthYearDummy_{year}'] = (df['BIRTHYR'] == year).astype(int)

# Create MARST_dummy
df['MARST_dummy'] = (df['MARST'] == 1).astype(int)

# Create Race_dummy
df['Race_dummy'] = (df['RACE'] == 2).astype(int)

# Create PWTYPE_dummy
df['PWTYPE_dummy'] = df['PWTYPE'].isin([1, 2, 3]).astype(int)

# Define the dependent variable (Y) and the independent variables (X)
Y = np.log(df['WEEKERN'])  # Natural logarithm of WEEKERN
independent_vars = ['YRSED'] + [f'BirthYearDummy_{year}' for year in range(1930, 1940)] + ['MARST_dummy', 'Race_dummy', 'PWTYPE_dummy']
X = df[independent_vars]

# Add constant term to the independent variables
X = sm.add_constant(X)

# Fit OLS regression model
ols_model = sm.OLS(Y, X).fit()

# Extract YRS ED coefficient and standard error
YRSED_coef_ols_3 = round(ols_model.params['YRSED'], 4)
YRSED_std_err_ols_3 = round(ols_model.bse['YRSED'], 4)


# Extract coefficients and standard errors
coefficients = ols_model.params
standard_errors = ols_model.bse

# Extract coefficients and standard errors for the dummy variables
MARST_dummy_coef_ols_1 = round(ols_model.params['MARST_dummy'], 4)
MARST_dummy_std_err_ols_1 = round(ols_model.bse['MARST_dummy'], 4)

Race_dummy_coef_ols_1 = round(ols_model.params['Race_dummy'], 4)
Race_dummy_std_err_ols_1 = round(ols_model.bse['Race_dummy'], 4)

PWTYPE_dummy_coef_ols_1 = round(ols_model.params['PWTYPE_dummy'], 4)
PWTYPE_dummy_std_err_ols_1 = round(ols_model.bse['PWTYPE_dummy'], 4)

"""*TSLS*"""

import pandas as pd
import numpy as np
import statsmodels.api as sm

# Load the dataset
url = 'https://raw.githubusercontent.com/mgstevens02/Compulsory-Education-IV-Replication/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_30_39_all_data.csv'
df = pd.read_csv(url)

df.dropna(inplace=True)

# Create birth year dummies
for year in range(1930, 1940):
    df[f'BirthYearDummy_{year}'] = (df['BIRTHYR'] == year).astype(int)

# Create MARST_dummy variable
df['MARST_dummy'] = (df['MARST'] == 1).astype(int)

# Create Race_dummy variable
df['Race_dummy'] = (df['RACE'] == 2).astype(int)

# Create PWTYPE_dummy variable
df['PWTYPE_dummy'] = (df['PWTYPE'].isin([1, 2, 3])).astype(int)

# Create region dummies
df['MW_dummy'] = (df['REGION2'] == 'MW').astype(int)
df['South_dummy'] = (df['REGION2'] == 'South').astype(int)
df['NE_dummy'] = (df['REGION2'] == 'NE').astype(int)
df['West_dummy'] = (df['REGION2'] == 'West').astype(int)

# First stage: Regress YRSED on BIRTHQTR and a constant (with instrumental variable)
endog_first_stage = df['YRSED']
exog_first_stage = sm.add_constant(df['BIRTHQTR'])
instrument_first_stage = sm.add_constant(df['BIRTHQTR'])  # Instrumental variable
first_stage_model = sm.OLS(endog_first_stage, exog_first_stage).fit(cov_type='HC0')  # Use robust standard errors

# Predict YRSED using the fitted first-stage model
df['YRSED_predicted'] = first_stage_model.predict()

# Second stage: Regress natural logarithm of WEEKERN on the predicted YRSED from the first stage

covariate_columns = ['YRSED_predicted', 'MARST_dummy', 'Race_dummy', 'PWTYPE_dummy', 'MW_dummy', 'South_dummy', 'NE_dummy', 'West_dummy'] + [f'BirthYearDummy_{year}' for year in range(1930, 1940)]

# Ensure all specified columns are present in df
# This is a safety check; remove or adjust columns as necessary based on your actual DataFrame
missing_columns = [col for col in covariate_columns if col not in df.columns]
if missing_columns:
    raise ValueError(f"Missing columns: {missing_columns}")

# Select the explanatory variables for the second stage
exog_second_stage = sm.add_constant(df[covariate_columns])
endog_second_stage = np.log(df['WEEKERN'])  # Natural logarithm of WEEKERN

second_stage_model = sm.OLS(endog_second_stage, exog_second_stage).fit(cov_type='HC0')  # Use robust standard errors

# Extract YRS ED coefficient and standard error from the second stage
YRSED_coef_second_stage_3 = round(second_stage_model.params['YRSED_predicted'], 4)
YRSED_std_err_second_stage_3 = round(second_stage_model.bse['YRSED_predicted'], 4)


# Extract coefficients and standard errors for the dummy variables
MARST_dummy_coef_1 = round(second_stage_model.params['MARST_dummy'], 4)
MARST_dummy_std_err_1 = round(second_stage_model.bse['MARST_dummy'], 4)

Race_dummy_coef_1 = round(second_stage_model.params['Race_dummy'], 4)
Race_dummy_std_err_1 = round(second_stage_model.bse['Race_dummy'], 4)

PWTYPE_dummy_coef_1 = round(second_stage_model.params['PWTYPE_dummy'], 4)
PWTYPE_dummy_std_err_1 = round(second_stage_model.bse['PWTYPE_dummy'], 4)

# Create DataFrame
data = {
    'OLS': [YRSED_coef_ols_3, YRSED_std_err_ols_3, "-", "-","-","-",MARST_dummy_coef_ols_1, MARST_dummy_std_err_ols_1, Race_dummy_coef_ols_1, Race_dummy_std_err_ols_1, PWTYPE_dummy_coef_ols_1, PWTYPE_dummy_std_err_ols_1],
    'TSLS': [YRSED_coef_second_stage_3, YRSED_std_err_second_stage_3, "-", "-","-","-",MARST_dummy_coef_1, MARST_dummy_std_err_1, Race_dummy_coef_1, Race_dummy_std_err_1,PWTYPE_dummy_coef_1,PWTYPE_dummy_std_err_1 ]
}
index = ['Years of Education', '', 'AGE', '','AGESQR', '', 'Married (1= married)', '', 'Race (1= black)', '', 'Place of Work (1= center city)', '']
df_3_output = pd.DataFrame(data, index=index)

# Display DataFrame
print(df_3_output)

"""**OLS AND TSLS #4**

Adding independent variables 'AGE', 'AGESQR', 'MARST' and 'PWTYPE' and 'RACE'

*OLS*
"""

import pandas as pd
import numpy as np
import statsmodels.api as sm

# Load the dataset
url = 'https://raw.githubusercontent.com/mgstevens02/Compulsory-Education-IV-Replication/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_30_39_all_data.csv'
df = pd.read_csv(url)

df.dropna(inplace=True)

# Create birth year dummies
for year in range(1930, 1940):
    df[f'BirthYearDummy_{year}'] = (df['BIRTHYR'] == year).astype(int)

# Create MARST_dummy
df['MARST_dummy'] = (df['MARST'] == 1).astype(int)

# Create Race_dummy
df['Race_dummy'] = (df['RACE'] == 2).astype(int)

# Create PWTYPE_dummy
df['PWTYPE_dummy'] = df['PWTYPE'].isin([1, 2, 3]).astype(int)

# Define the dependent variable (Y) and the independent variables (X)
Y = np.log(df['WEEKERN'])  # Natural logarithm of WEEKERN
independent_vars = ['YRSED'] + [f'BirthYearDummy_{year}' for year in range(1930, 1940)] + ['MARST_dummy', 'Race_dummy', 'PWTYPE_dummy']+['AGE']+['AGESQR']
X = df[independent_vars]

# Add constant term to the independent variables
X = sm.add_constant(X)

# Fit OLS regression model
ols_model = sm.OLS(Y, X).fit()


# Extract YRS ED coefficient and standard error
YRSED_coef_ols_4 = round(ols_model.params['YRSED'], 4)
YRSED_std_err_ols_4 = round(ols_model.bse['YRSED'], 4)


# Extract coefficients and standard errors for AGE and AGESQR
age_coef_2 = round(ols_model.params['AGE'], 4)
age_std_err_2 = round(ols_model.bse['AGE'], 4)

agesqr_coef_2 = round(ols_model.params['AGESQR'], 4)
agesqr_std_err_2= round(ols_model.bse['AGESQR'], 4)

# Extract coefficients and standard errors
coefficients = ols_model.params
standard_errors = ols_model.bse

# Extract coefficients and standard errors for the dummy variables
MARST_dummy_coef_ols_2 = round(ols_model.params['MARST_dummy'], 4)
MARST_dummy_std_err_ols_2 = round(ols_model.bse['MARST_dummy'], 4)

Race_dummy_coef_ols_2 = round(ols_model.params['Race_dummy'], 4)
Race_dummy_std_err_ols_2 = round(ols_model.bse['Race_dummy'], 4)

PWTYPE_dummy_coef_ols_2 = round(ols_model.params['PWTYPE_dummy'], 4)
PWTYPE_dummy_std_err_ols_2 = round(ols_model.bse['PWTYPE_dummy'], 4)

"""*TSLS*"""

import pandas as pd
import numpy as np
import statsmodels.api as sm

# Load the dataset
url = 'https://raw.githubusercontent.com/mgstevens02/Compulsory-Education-IV-Replication/cb1cddf3b7ed8b127357f5aea2caf64b97b5ef7b/1980_30_39_all_data.csv'
df = pd.read_csv(url)

df.dropna(inplace=True)

# Create birth year dummies
for year in range(1930, 1940):
    df[f'BirthYearDummy_{year}'] = (df['BIRTHYR'] == year).astype(int)

# Create MARST_dummy variable
df['MARST_dummy'] = (df['MARST'] == 1).astype(int)

# Create Race_dummy variable
df['Race_dummy'] = (df['RACE'] == 2).astype(int)

# Create PWTYPE_dummy variable
df['PWTYPE_dummy'] = (df['PWTYPE'].isin([1, 2, 3])).astype(int)

# Create region dummies
df['MW_dummy'] = (df['REGION2'] == 'MW').astype(int)
df['South_dummy'] = (df['REGION2'] == 'South').astype(int)
df['NE_dummy'] = (df['REGION2'] == 'NE').astype(int)
df['West_dummy'] = (df['REGION2'] == 'West').astype(int)

# First stage: Regress YRSED on BIRTHQTR and a constant (with instrumental variable)
endog_first_stage = df['YRSED']
exog_first_stage = sm.add_constant(df['BIRTHQTR'])
instrument_first_stage = sm.add_constant(df['BIRTHQTR'])  # Instrumental variable
first_stage_model = sm.OLS(endog_first_stage, exog_first_stage).fit(cov_type='HC0')  # Use robust standard errors

# Predict YRSED using the fitted first-stage model
df['YRSED_predicted'] = first_stage_model.predict()


# Second stage: Regress natural logarithm of WEEKERN on the predicted YRSED from the first stage,

# Construct the list of explanatory variable names for the second stage
covariate_columns = ['YRSED_predicted', 'MARST_dummy', 'Race_dummy', 'PWTYPE_dummy', 'MW_dummy', 'South_dummy', 'NE_dummy', 'West_dummy', 'AGE', 'AGESQR'] + [f'BirthYearDummy_{year}' for year in range(1930, 1940)]

# Ensure all specified columns are present in df
# This is a safety check; remove or adjust columns as necessary based on your actual DataFrame
missing_columns = [col for col in covariate_columns if col not in df.columns]
if missing_columns:
    raise ValueError(f"Missing columns: {missing_columns}")

# Select the explanatory variables for the second stage
exog_second_stage = sm.add_constant(df[covariate_columns])

endog_second_stage = np.log(df['WEEKERN'])  # Natural logarithm of WEEKERN
second_stage_model = sm.OLS(endog_second_stage, exog_second_stage).fit(cov_type='HC0')  # Use robust standard errors


# Extract YRS ED coefficient and standard error from the second stage
YRSED_coef_second_stage_4 = round(second_stage_model.params['YRSED_predicted'], 4)
YRSED_std_err_second_stage_4 = round(second_stage_model.bse['YRSED_predicted'], 4)


# Extract coefficients and standard errors for AGE and AGESQR from the second stage model
age_coef_second_stage_2 = round(second_stage_model.params['AGE'], 4)
age_std_err_second_stage_2 = round(second_stage_model.bse['AGE'], 4)

agesqr_coef_second_stage_2 = round(second_stage_model.params['AGESQR'], 6)
agesqr_std_err_second_stage_2 = round(second_stage_model.bse['AGESQR'], 4)


# Extract coefficients and standard errors for the dummy variables
MARST_dummy_coef_2 = round(second_stage_model.params['MARST_dummy'], 4)
MARST_dummy_std_err_2 = round(second_stage_model.bse['MARST_dummy'], 4)

Race_dummy_coef_2 = round(second_stage_model.params['Race_dummy'], 4)
Race_dummy_std_err_2 = round(second_stage_model.bse['Race_dummy'], 4)

PWTYPE_dummy_coef_2 = round(second_stage_model.params['PWTYPE_dummy'], 4)
PWTYPE_dummy_std_err_2 = round(second_stage_model.bse['PWTYPE_dummy'], 4)

# Create DataFrame
data = {
    'OLS': [YRSED_coef_ols_4, YRSED_std_err_ols_4, age_coef_2, age_std_err_2, agesqr_coef_2,agesqr_std_err_2, MARST_dummy_coef_ols_2, MARST_dummy_std_err_ols_2, Race_dummy_coef_ols_2, Race_dummy_std_err_ols_2, PWTYPE_dummy_coef_ols_2, PWTYPE_dummy_std_err_ols_2],
    'TSLS': [YRSED_coef_second_stage_4, YRSED_std_err_second_stage_4, age_coef_second_stage_2, age_std_err_second_stage_2, agesqr_coef_second_stage_2,agesqr_std_err_second_stage_2,MARST_dummy_coef_2, MARST_dummy_std_err_2, Race_dummy_coef_2, Race_dummy_std_err_2,PWTYPE_dummy_coef_2,PWTYPE_dummy_std_err_2 ]
}
index = ['Years of Education', '', 'AGE', '','AGESQR', '', 'Married (1= married)', '', 'Race (1= black)', '', 'Place of Work (1= center city)', '']
df_4_output = pd.DataFrame(data, index=index)

# Display DataFrame
print(df_4_output)

"""## **TABLE V COMBINED RESULTS**"""

import pandas as pd

# Assuming df_1_output, df_2_output, df_3_output, and df_4_output are your dataframes

# Rename the "OLS" and "TSLS" columns for each dataframe
df_1_output.rename(columns={'OLS': 'OLS (1)', 'TSLS': 'TSLS (1)'}, inplace=True)
df_2_output.rename(columns={'OLS': 'OLS (2)', 'TSLS': 'TSLS (2)'}, inplace=True)
df_3_output.rename(columns={'OLS': 'OLS (3)', 'TSLS': 'TSLS (3)'}, inplace=True)
df_4_output.rename(columns={'OLS': 'OLS (4)', 'TSLS': 'TSLS (4)'}, inplace=True)

# Reset the index of each dataframe
df_1_output.reset_index(drop=True, inplace=True)
df_2_output.reset_index(drop=True, inplace=True)
df_3_output.reset_index(drop=True, inplace=True)
df_4_output.reset_index(drop=True, inplace=True)

# Concatenate the dataframes along the rows axis (axis=1)
combined_df = pd.concat([df_1_output, df_2_output, df_3_output, df_4_output], axis=1)

# Add appropriate row names
row_names = ['Years of Education', '', 'AGE', '', 'AGESQR', '', 'Married (1= married)', '', 'Race (1= black)', '', 'Place of Work (1= center city)', '']
combined_df.index = row_names[:len(combined_df.index)]

# Print the combined dataframe
print(combined_df)

"""**KEY CONCLUSIONS FROM TABLE V**

1. **Consistency Between OLS and TSLS Estimates**: There is a remarkable similarity between the Ordinary Least Squares (OLS) and Two-Stage Least Squares (TSLS) estimates of the return to education for the cohorts examined. This consistency suggests that the potential endogeneity of education in the wage equation may not significantly bias the OLS estimates of the return to education for the samples analyzed.

2. **Compulsory Schooling**: The analysis indicates that compulsory schooling laws effectively increase the level of education among individuals, particularly for those born in earlier quarters of the year who are affected by these laws due to the timing of school enrollment.

3. **Return to Education Estimates**: The TSLS estimates provide a measure of the return to education, correcting for the potential bias due to the endogeneity of education. The difference between the TSLS and OLS estimates is not statistically significant.

4. **Variability in Education Across Birth Quarters**: The study highlights that the effect of education on earnings is identified by the variability in education across quarters of birth within each birth year. This approach leverages the variation induced by compulsory schooling laws to estimate the causal impact of education on earnings.

5. **Statistical Significance and Magnitude of Estimates**: The findings underscore that the within-year-of-birth differences in average years of education and the effects on earnings are statistically significant and consistent across the analytical methods used. The study provides evidence supporting the hypothesis that compulsory schooling laws contribute to differences in educational attainment, which in turn influence earnings.

6. **Overidentification Tests**: The TSLS models are overidentified, allowing for tests of the validity of the instrumental variables used. The study conducts these tests and finds that, in most cases, the overidentifying restrictions are not rejected, providing further support for the chosen instrumental variable approach.


In summary, the conclusions from Table V and related discussions in the document underscore the effectiveness of compulsory schooling laws in increasing educational attainment and provide robust estimates of the return to education. The consistency between OLS and TSLS estimates reinforces the credibility of the findings.
"""